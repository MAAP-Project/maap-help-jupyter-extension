{"version":3,"file":"lib_index_js.aef22b019f6d5e667b94.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sBAAsB;AACoC;AACY;AACnB;AACO;AACT;AACwB;AACzE,WAAW,yBAAyB;AACpC;AACuC;AACvC;AACoD;AACpD;AAC4B;AACa;AACuB;AAC7C;AACnB;AACA,YAAY,wEAAqB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oEAAgB,EAAE,iEAAe,EAAE,oEAAe,EAAE,2DAAS,EAAE,kEAAgB;AAC9F;AACA;AACA;AACA;AACA;AACA,8BAA8B,+DAAa,GAAG,WAAW;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iCAAiC,wEAAqB;AACtD;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA,wBAAwB,6EAA2B;AACnD,wBAAwB,uEAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oEAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,wEAAqB;AACtD;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6EAA2B;AACnD,wBAAwB,uEAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oEAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,kDAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,sBAAsB,2CAA2C;AACjE;AACA;AACA;AACA;AACA;AACA,YAAY,6DAAmB;AAC/B;AACA,KAAK;AACL,sBAAsB,qDAAqD;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,sBAAsB,6DAA6D;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,sBAAsB,0DAA0D;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,sBAAsB,oDAAoD;AAC1E;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAe;AAC3B;AACA,KAAK;AACL,sBAAsB,gDAAgD;AACtE,YAAY,WAAW;AACvB,yBAAyB,iDAAI,GAAG,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAS;AACtC,KAAK;AACL,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;ACxPiC;AACM;AAC7C;AACZ;AACP,IAAI,gEAAU;AACd;AACA,kBAAkB,sDAAgB;AAClC;AACA,kBAAkB,iEAAe,GAAG,aAAa;AACjD,KAAK;AACL;AACO;AACP,IAAI,gEAAU;AACd;AACA,kBAAkB,uDAAiB;AACnC;AACA,kBAAkB,iEAAe,GAAG,aAAa;AACjD,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;AClByC;AACzC,WAAW,aAAa;AAC4B;AACpD;AACA;AACA,EAAE,iBAAiB;AACA;AACnB;AACA;AACA;AACA;AACO,2BAA2B,mDAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,SAAS,EAAE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,gCAAgC,mDAAM;AAC7C;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACO,kCAAkC,mDAAM;AAC/C;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACO,+BAA+B,mDAAM;AAC5C;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAqB;AAC7B;AACA;;;;;;;;;;;;;;;;;;;AC1FA;AACsH;AAC7B;AACzF,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F;AACA,0DAA0D,yBAAyB,uBAAuB,0BAA0B,gBAAgB,KAAK,gBAAgB,yBAAyB,aAAa,cAAc,kBAAkB,mBAAmB,gBAAgB,KAAK,WAAW,iFAAiF,YAAY,aAAa,aAAa,WAAW,MAAM,KAAK,YAAY,WAAW,UAAU,UAAU,UAAU,UAAU,yCAAyC,yBAAyB,uBAAuB,0BAA0B,gBAAgB,KAAK,gBAAgB,yBAAyB,aAAa,cAAc,kBAAkB,mBAAmB,gBAAgB,KAAK,uBAAuB;AAC3wB;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;;ACPvC;AACsH;AAC7B;AACW;AACpG,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F,0BAA0B,qFAAiC;AAC3D;AACA,mDAAmD,kEAAkE;AACrH;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;ACTkD;AACzF,YAAuF;;AAEvF;;AAEA;AACA;;AAEA,aAAa,0GAAG,CAAC,sFAAO;;;;AAIxB,iEAAe,6FAAc,MAAM","sources":["webpack://@maap-jupyterlab/maap-help-jupyter-extension/./lib/index.js","webpack://@maap-jupyterlab/maap-help-jupyter-extension/./lib/popups.js","webpack://@maap-jupyterlab/maap-help-jupyter-extension/./lib/widgets.js","webpack://@maap-jupyterlab/maap-help-jupyter-extension/./style/base.css","webpack://@maap-jupyterlab/maap-help-jupyter-extension/./style/index.css","webpack://@maap-jupyterlab/maap-help-jupyter-extension/./style/index.css?0140"],"sourcesContent":["/** jupyterlab imp: {}orts **/\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { ICommandPalette, WidgetTracker } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { NotebookActions, INotebookTracker } from '@jupyterlab/notebook';\n//import { request, RequestResult } from './request';\n/** phosphor imports **/\nimport { Menu } from '@lumino/widgets';\n/** other external imports **/\nimport { INotification } from \"jupyterlab_toastify\";\n/** internal imports **/\nimport '../style/index.css';\nimport { IFrameWidget } from './widgets';\nimport { setResultsLimit, displaySearchParams } from './popups';\nimport \"./globals\";\nlet edsc_server = '';\nconsole.log(PageConfig.getBaseUrl());\n/*var valuesUrl = new URL(PageConfig.getBaseUrl() + 'jupyter-server-extension/maapsec/environment');\n\nrequest('get', valuesUrl.href).then((res: RequestResult) => {\n  if (res.ok) {\n    let environment = JSON.parse(res.data);\n    edsc_server = 'https://' + environment['edsc_server'];\n  }\n});*/\n///////////////////////////////////////////////////////////////\n//\n// Earthdata Search Client extension\n//\n///////////////////////////////////////////////////////////////\nconst extension = {\n    id: 'edsc_extension',\n    autoStart: true,\n    requires: [IDocumentManager, ICommandPalette, ILayoutRestorer, IMainMenu, INotebookTracker],\n    activate: activate\n};\nfunction activate(app, docManager, palette, restorer, mainMenu, tracker, panel) {\n    let widget;\n    const namespace = 'tracker-iframe';\n    let instanceTracker = new WidgetTracker({ namespace });\n    //\n    // Listen for messages being sent by the iframe - parse the url and set as parameters for search\n    //\n    window.addEventListener(\"message\", (event) => {\n        // if the message sent is the edsc url\n        if (typeof event.data === \"string\") {\n            //globals.edscUrl = event.data;\n            console.log(\"graceal- event data\" + event.data);\n            //const queryString = '?' + event.data.split('?')[1];\n            // console.log(\"Granule\", globals.granuleQuery);\n            // console.log(\"Collection\", globals.collectionQuery);\n        }\n    });\n    //\n    // Get the current cell selected in a notebook\n    //\n    function getCurrent(args) {\n        const widget = tracker.currentWidget;\n        const activate = args['activate'] !== false;\n        if (activate && widget) {\n            app.shell.activateById(widget.id);\n        }\n        return widget;\n    }\n    // PASTE SEARCH INTO A NOTEBOOK\n    function pasteSearch(args, result_type, query_type = 'granule') {\n        console.log(\"graceal in paste search in index.ts\");\n        const current = getCurrent(args);\n        // If no search is selected, send an error\n        /*if (Object.keys(granuleParams).length == 0) {\n            INotification.error(\"Error: No Search Selected.\");\n            return;\n        }*/\n        // Paste Search Query\n        if (result_type == \"query\") {\n            var getUrl = new URL(PageConfig.getBaseUrl() + 'jupyter-server-extension/edsc/getQuery');\n            /*if (query_type === 'granule') {\n                getUrl.searchParams.append(\"cmr_query\", granuleQuery);\n                getUrl.searchParams.append(\"query_type\", 'granule');\n            } else {\n                getUrl.searchParams.append(\"cmr_query\", collectionQuery);\n                getUrl.searchParams.append(\"query_type\", 'collection');\n            }\n            getUrl.searchParams.append(\"limit\", limit);*/\n            // Make call to back end\n            var xhr = new XMLHttpRequest();\n            let response_text = \"\";\n            xhr.onload = function () {\n                if (xhr.status == 200) {\n                    let response = \"testing string\"; //$.parseJSON(xhr.response);\n                    response_text = response.query_string;\n                    if (response_text == \"\") {\n                        response_text = \"No results found.\";\n                    }\n                    if (current) {\n                        NotebookActions.insertBelow(current.content);\n                        NotebookActions.paste(current.content);\n                        current.content.mode = 'edit';\n                        const insert_text = \"# Test comment notebook\";\n                        if (current.content.activeCell) {\n                            current.content.activeCell.model.value.text = insert_text;\n                        }\n                    }\n                }\n                else {\n                    console.log(\"Error making call to get query. Status is \" + xhr.status);\n                    INotification.error(\"Error making call to get search query. Have you selected valid search parameters?\");\n                }\n            };\n            xhr.onerror = function () {\n                console.error(\"Error making call to get query\");\n            };\n            xhr.open(\"GET\", getUrl.href, true);\n            xhr.send(null);\n            // Paste Search Results\n        }\n        else {\n            var getUrl = new URL(PageConfig.getBaseUrl() + 'jupyter-server-extension/edsc/getGranules');\n            /*getUrl.searchParams.append(\"cmr_query\", granuleQuery);\n            getUrl.searchParams.append(\"limit\", limit);*/\n            // Make call to back end\n            var xhr = new XMLHttpRequest();\n            //let url_response:any = [];\n            xhr.onload = function () {\n                if (xhr.status == 200) {\n                    let response = \"testing string\"; //$.parseJSON(xhr.response);\n                    let response_text = response.granule_urls;\n                    if (response_text == \"\") {\n                        response_text = \"No results found.\";\n                    }\n                    //url_response = response_text;\n                    if (current) {\n                        NotebookActions.insertBelow(current.content);\n                        NotebookActions.paste(current.content);\n                        current.content.mode = 'edit';\n                        const insert_text = \"# Test comment notebook\";\n                        if (current.content.activeCell) {\n                            current.content.activeCell.model.value.text = insert_text;\n                        }\n                    }\n                }\n                else {\n                    console.log(\"Error making call to get results. Status is \" + xhr.status);\n                    INotification.error(\"Error making call to get search results. Have you selected valid search parameters?\");\n                }\n            };\n            xhr.onerror = function () {\n                console.log(\"Error making call to get results\");\n            };\n            xhr.open(\"GET\", getUrl.href, true);\n            xhr.send(null);\n        }\n    }\n    /******** Set commands for command palette and main menu *********/\n    // Add an application command to open ESDC\n    const open_command = 'iframe:open';\n    app.commands.addCommand(open_command, {\n        label: 'Open EarthData Search',\n        isEnabled: () => true,\n        execute: args => {\n            // Only allow user to have one EDSC window\n            if (widget == undefined) {\n                widget = new IFrameWidget(edsc_server);\n                app.shell.add(widget, 'main');\n                app.shell.activateById(widget.id);\n            }\n            else {\n                // if user already has EDSC, just switch to tab\n                app.shell.add(widget, 'main');\n                app.shell.activateById(widget.id);\n            }\n            if (!instanceTracker.has(widget)) {\n                // Track the state of the widget for later restoration\n                instanceTracker.add(widget);\n            }\n        }\n    });\n    palette.addItem({ command: open_command, category: 'Search' });\n    const display_params_command = 'search:displayParams';\n    app.commands.addCommand(display_params_command, {\n        label: 'View Selected Search Parameters',\n        isEnabled: () => true,\n        execute: args => {\n            displaySearchParams();\n        }\n    });\n    palette.addItem({ command: display_params_command, category: 'Search' });\n    const paste_collection_query_command = 'search:pasteCollectionQuery';\n    app.commands.addCommand(paste_collection_query_command, {\n        label: 'Paste Collection Search Query',\n        isEnabled: () => true,\n        execute: args => {\n            pasteSearch(args, \"query\", \"collection\");\n        }\n    });\n    palette.addItem({ command: paste_collection_query_command, category: 'Search' });\n    const paste_granule_query_command = 'search:pasteGranuleQuery';\n    app.commands.addCommand(paste_granule_query_command, {\n        label: 'Paste Granule Search Query',\n        isEnabled: () => true,\n        execute: args => {\n            pasteSearch(args, \"query\", \"granule\");\n        }\n    });\n    palette.addItem({ command: paste_granule_query_command, category: 'Search' });\n    const paste_results_command = 'search:pasteResults';\n    app.commands.addCommand(paste_results_command, {\n        label: 'Paste Granule Search Results',\n        isEnabled: () => true,\n        execute: args => {\n            pasteSearch(args, \"results\");\n        }\n    });\n    palette.addItem({ command: paste_results_command, category: 'Search' });\n    const set_limit_command = 'search:setLimit';\n    app.commands.addCommand(set_limit_command, {\n        label: 'Set Results Limit',\n        isEnabled: () => true,\n        execute: args => {\n            setResultsLimit();\n        }\n    });\n    palette.addItem({ command: set_limit_command, category: 'Search' });\n    const { commands } = app;\n    let searchMenu = new Menu({ commands });\n    searchMenu.title.label = 'Data Search';\n    [\n        open_command,\n        display_params_command,\n        paste_collection_query_command,\n        paste_granule_query_command,\n        paste_results_command,\n        set_limit_command\n    ].forEach(command => {\n        searchMenu.addItem({ command });\n    });\n    mainMenu.addMenu(searchMenu, { rank: 100 });\n    // Track and restore the widget state\n    restorer.restore(instanceTracker, {\n        command: open_command,\n        name: () => namespace\n    });\n    console.log('JupyterLab extension edsc_extension is activated!');\n    return instanceTracker;\n}\n;\nexport default extension;\n","import { Dialog, showDialog } from \"@jupyterlab/apputils\";\nimport { LimitPopupWidget, ParamsPopupWidget } from \"./widgets\";\nimport \"./globals\";\nexport function setResultsLimit() {\n    showDialog({\n        title: 'Set Results Limit:',\n        body: new LimitPopupWidget(),\n        focusNodeSelector: 'input',\n        buttons: [Dialog.okButton({ label: 'Ok' })]\n    });\n}\nexport function displaySearchParams() {\n    showDialog({\n        title: 'Current Search Parameters:',\n        body: new ParamsPopupWidget(),\n        focusNodeSelector: 'input',\n        buttons: [Dialog.okButton({ label: 'Ok' })]\n    });\n}\n","import { Widget } from '@lumino/widgets';\n//import { PageConfig } from '@jupyterlab/coreutils'\nimport { INotification } from \"jupyterlab_toastify\";\n/*import {\n  request, RequestResult\n} from './request';*/\nimport \"./globals\";\nlet unique = 0;\n//\n// Widget to display Earth Data Search Client inside an iframe\n//\nexport class IFrameWidget extends Widget {\n    constructor(path) {\n        super();\n        this.id = path + '-' + unique;\n        unique += 1;\n        this.title.label = \"Earthdata Search\";\n        this.title.closable = true;\n        let div = document.createElement('div');\n        div.classList.add('iframe-widget');\n        let iframe = document.createElement('iframe');\n        iframe.id = \"iframeid\";\n        // set proxy to EDSC\n        /*request('get', path).then((res: RequestResult) => {\n          if (res.ok){\n            console.log('site accesible: proceeding');\n            iframe.src = path;\n          } else {\n            iframe.setAttribute('baseURI', PageConfig.getBaseUrl());\n    \n            console.log('site failed with code ' + res.status.toString());\n            if(res.status == 404){\n    \n            } else if(res.status == 401){\n    \n            } else {\n              console.log('setting proxy');\n              path = \"edsc/proxy/\" + path;\n              iframe.src = path;\n            }\n          }\n        });*/\n        div.appendChild(iframe);\n        this.node.appendChild(div);\n    }\n}\n;\n//\n// Widget to display selected search parameter\n//\nexport class ParamsPopupWidget extends Widget {\n    constructor() {\n        let body = document.createElement('div');\n        body.style.display = 'flex';\n        body.style.flexDirection = 'column';\n        body.innerHTML = \"<pre>Test: </pre><br>\";\n        super({ node: body });\n    }\n}\n//\n// Popup widget to display any string message\n//\nexport class FlexiblePopupWidget extends Widget {\n    constructor(text) {\n        let body = document.createElement('div');\n        body.style.display = 'flex';\n        body.style.flexDirection = 'column';\n        body.innerHTML = text;\n        super({ node: body });\n    }\n}\n//\n// Widget with popup to set search results limit\n//\nexport class LimitPopupWidget extends Widget {\n    constructor() {\n        let body = document.createElement('div');\n        body.style.display = 'flex';\n        body.style.flexDirection = 'column';\n        super({ node: body });\n        this.getValue = this.getValue.bind(this);\n        let inputLimit = document.createElement('input');\n        inputLimit.id = 'inputLimit';\n        this.node.appendChild(inputLimit);\n    }\n    /* sets limit */\n    getValue() {\n        console.log(\"graceal- in the get value function\");\n        INotification.success(\"made it to get value function\");\n    }\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".iframe-widget {\\n    position: relative;\\n    overflow: hidden;\\n    padding-top: 56.25%;\\n    height: 0;\\n  }\\n  \\n  iframe {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    width: 100%;\\n    height: 100%;\\n    border: 0;\\n  }\\n  \", \"\",{\"version\":3,\"sources\":[\"webpack://./style/base.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,mBAAmB;IACnB,SAAS;EACX;;EAEA;IACE,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,WAAW;IACX,YAAY;IACZ,SAAS;EACX\",\"sourcesContent\":[\".iframe-widget {\\n    position: relative;\\n    overflow: hidden;\\n    padding-top: 56.25%;\\n    height: 0;\\n  }\\n  \\n  iframe {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    width: 100%;\\n    height: 100%;\\n    border: 0;\\n  }\\n  \"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../node_modules/css-loader/dist/cjs.js!./base.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};"],"names":[],"sourceRoot":""}