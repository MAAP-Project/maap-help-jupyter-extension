{"version":3,"file":"lib_index_js.d431236e9f4546aece30.js","mappings":";;;;;;;;;;;;;;;;;;;AAAuC;AACkB;AACf;AAC1C;AACA,yBAAyB,oDAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,IAAI,2DAAmB;AACvB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,sBAAsB,kDAAkD;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iDAAS;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP,YAAY,WAAW;AACvB,8BAA8B,iDAAI,GAAG,UAAU;AAC/C;AACA;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C,KAAK;AACL,wCAAwC,WAAW;AACnD;;;;;;;;;;;;;;;;;;;ACzEmD;AACf;AAC7B;AACP;AACA;AACA,gCAAgC,wEAAqB;AACrD;AACA,QAAQ,iDAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA,gCAAgC,wEAAqB;AACrD;AACA;AACA;AACA,QAAQ,iDAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;;ACrCuD;AACN;AACA;AACF;AACiB;AAChE;AACA;AACA;AACA,eAAe,iEAAe,EAAE,yDAAQ;AACxC,eAAe,2DAAS;AACxB,cAAc,oDAAa;AAC3B;AACA;AACA;AACA;AACA,eAAe,2DAAS;AACxB,cAAc,0DAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,qEAAqE,EAAC;;;;;;;;;;;;;;;;AClC9E;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,8CAA8C;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL","sources":["webpack://@maap-jupyterlab/maap-help-jupyter-extension/./lib/activate.js","webpack://@maap-jupyterlab/maap-help-jupyter-extension/./lib/funcs.js","webpack://@maap-jupyterlab/maap-help-jupyter-extension/./lib/index.js","webpack://@maap-jupyterlab/maap-help-jupyter-extension/./lib/request.js"],"sourcesContent":["import { Menu } from '@lumino/widgets';\nimport { maapLogin, loadMaapEnvironment } from './funcs';\nimport { Token } from '@lumino/coreutils';\nconst idMaapProfile = 'maap-help-extension:IMaapProfile';\nconst IMaapProfile = new Token(idMaapProfile);\nlet maapEnvironment = {};\nclass MaapProfile {\n}\nconst login_command = 'maapsec_login_command';\nvar loginWindow;\nvar _state;\nexport function activateLogin(app, palette, state) {\n    _state = state;\n    const maapProfile = new MaapProfile();\n    var lbl = 'Login';\n    loadMaapEnvironment().then((env_result) => {\n        console.log(\"Loaded maap env\");\n        console.log(env_result);\n        maapEnvironment = env_result;\n    });\n    app.commands.addCommand(login_command, {\n        label: lbl,\n        isEnabled: () => true,\n        execute: args => {\n            console.log(\"testing...\");\n            console.log(maapEnvironment);\n            var url = 'https://' + maapEnvironment['auth_server'] + '/cas/login?service=' + encodeURIComponent(window.location.href.split('?')[0]);\n            var title = 'MAAP Login';\n            const w = 800;\n            const h = 750;\n            var left = (screen.width / 2) - (w / 2);\n            var top = (screen.height / 2) - (h / 2);\n            loginWindow = window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);\n            //if (window.focus) loginWindow.focus();\n            if (document.hasFocus() && loginWindow != null) {\n                loginWindow.focus();\n            }\n            window.addEventListener('message', handleMessageDispatch);\n        }\n    });\n    palette.addItem({ command: login_command, category: 'MAAP Profile' });\n    console.log('MAAP Sec is activated');\n    // Load the saved plugin state and apply it once the app\n    // has finished restoring its former layout.\n    Promise.all([state.fetch(idMaapProfile), app.restored])\n        .then(([saved]) => {\n        console.log('saved profile');\n        console.log(saved);\n    });\n    return maapProfile;\n}\nfunction handleMessageDispatch(ev) {\n    window.removeEventListener('message', handleMessageDispatch);\n    let sTicket = ev.data;\n    loginWindow.close();\n    maapLogin(encodeURIComponent(window.location.href.split('?')[0]), sTicket)\n        .then((login_result) => {\n        console.log(login_result);\n        _state.save(idMaapProfile, login_result);\n    });\n}\n// add MAAP Profile options to Menu dropdown\nexport function activateMenuOptions(app, mainMenu) {\n    const { commands } = app;\n    let maapProfileMenu = new Menu({ commands });\n    maapProfileMenu.id = 'maapsec';\n    maapProfileMenu.title.label = 'MAAP Login';\n    [\n        login_command,\n    ].forEach(command => {\n        maapProfileMenu.addItem({ command });\n    });\n    mainMenu.addMenu(maapProfileMenu, { rank: 110 });\n}\n","import { PageConfig } from '@jupyterlab/coreutils';\nimport { request } from './request';\nexport function loadMaapEnvironment() {\n    return new Promise((resolve, reject) => {\n        console.log(\"In load function\");\n        var valuesUrl = new URL(PageConfig.getBaseUrl() + 'jupyter-server-extension/maapsec/environment');\n        console.log(valuesUrl);\n        request('get', valuesUrl.href).then((res) => {\n            console.log('maapsec environment response');\n            console.log(res);\n            if (res.ok) {\n                let environment = JSON.parse(res.data);\n                resolve(environment);\n            }\n            else {\n                resolve(null);\n            }\n        });\n    });\n}\nexport function maapLogin(service, ticket) {\n    return new Promise((resolve, reject) => {\n        var valuesUrl = new URL(PageConfig.getBaseUrl() + 'jupyter-server-extension/maapsec/login');\n        console.log(valuesUrl);\n        valuesUrl.searchParams.append('service', service);\n        valuesUrl.searchParams.append('ticket', ticket);\n        request('get', valuesUrl.href).then((res) => {\n            if (res.ok) {\n                let attributes = JSON.parse(JSON.parse(res.data)['attributes']);\n                resolve(attributes);\n            }\n            else {\n                console.log(res);\n                resolve(null);\n            }\n        });\n    });\n}\n","import { ICommandPalette } from '@jupyterlab/apputils';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { activateMenuOptions, activateLogin } from './activate';\nconst extensionList = {\n    id: 'maapsec-login',\n    autoStart: true,\n    requires: [ICommandPalette, IStateDB],\n    optional: [ILauncher],\n    activate: activateLogin\n};\nconst extensionMaapProfileMenu = {\n    id: 'maapsec-menu',\n    autoStart: true,\n    requires: [IMainMenu],\n    activate: activateMenuOptions\n};\nconst extensionMaapLoginReceiver = {\n    id: 'maapsec-login-receiver',\n    autoStart: true,\n    activate: (app) => {\n        if (window.location.href.includes('ticket=')) {\n            let name = 'ticket';\n            let url = window.location.href;\n            var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'), results = regex.exec(url);\n            if (results != null) {\n                let ticketValue = decodeURIComponent(results[2].replace(/\\+/g, ' '));\n                window.opener.postMessage(ticketValue, url);\n            }\n        }\n        console.log('MAAPSec extension activated!');\n    }\n};\nexport default [extensionMaapProfileMenu, extensionList, extensionMaapLoginReceiver];\n","export const DEFAULT_REQUEST_OPTIONS = {\n    ignoreCache: false,\n    headers: {\n        Accept: 'application/json, text/javascript, text/plain',\n    },\n    // default max duration for a request in ms\n    // currently set to 120s = 2min\n    timeout: 60000,\n};\nfunction queryParams(params = {}) {\n    return Object.keys(params)\n        .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k]))\n        .join('&');\n}\nfunction withQuery(url, params = {}) {\n    const queryString = queryParams(params);\n    return queryString ? url + (url.indexOf('?') === -1 ? '?' : '&') + queryString : url;\n}\nfunction parseXHRResult(xhr) {\n    return {\n        ok: xhr.status >= 200 && xhr.status < 300,\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: xhr.getAllResponseHeaders(),\n        data: xhr.responseText,\n        json: () => JSON.parse(xhr.responseText),\n        url: xhr.responseURL\n    };\n}\nfunction errorResponse(xhr, message = null) {\n    return {\n        ok: false,\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: xhr.getAllResponseHeaders(),\n        data: message || xhr.statusText,\n        json: () => JSON.parse(message || xhr.statusText),\n        url: xhr.responseURL\n    };\n}\nexport function request(method, url, queryParams = {}, body = null, options = DEFAULT_REQUEST_OPTIONS) {\n    const ignoreCache = options.ignoreCache || DEFAULT_REQUEST_OPTIONS.ignoreCache;\n    const headers = options.headers || DEFAULT_REQUEST_OPTIONS.headers;\n    const timeout = options.timeout || DEFAULT_REQUEST_OPTIONS.timeout;\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open(method, withQuery(url, queryParams));\n        if (headers) {\n            Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\n        }\n        if (ignoreCache) {\n            xhr.setRequestHeader('Cache-Control', 'no-cache');\n        }\n        xhr.timeout = timeout;\n        xhr.onload = evt => {\n            resolve(parseXHRResult(xhr));\n        };\n        xhr.onerror = evt => {\n            resolve(errorResponse(xhr, 'Failed to make request.'));\n        };\n        xhr.ontimeout = evt => {\n            resolve(errorResponse(xhr, 'Request took longer than expected.'));\n        };\n        if (method === 'post' && body) {\n            xhr.setRequestHeader('Content-Type', 'application/json');\n            xhr.send(JSON.stringify(body));\n        }\n        else {\n            xhr.send();\n        }\n    });\n}\n"],"names":[],"sourceRoot":""}